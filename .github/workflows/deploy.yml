name: Deploy Infrastructure and Provision

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment name'
        required: true
        default: 'dev'
      vpc_cidr:
        description: 'VPC CIDR block'
        required: true
        default: '10.0.0.0/16'
      peer_vpc_id:
        description: 'Peer VPC ID'
        required: true
      peer_cidr_block:
        description: 'Peer VPC CIDR block'
        required: true

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform

        env:

          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_env: ${{ github.event.inputs.env }}
          TF_VAR_vpc_cidr: ${{ github.event.inputs.vpc_cidr }}
          TF_VAR_peer_vpc_id: ${{ github.event.inputs.peer_vpc_id }}
          TF_VAR_peer_cidr_block: ${{ github.event.inputs.peer_cidr_block }}
        run: terraform apply -auto-approve

    outputs:
      public_ip: ${{ steps.apply.outputs.public_ip }}
      private_ips: ${{ steps.apply.outputs.private_ips }}

  ansible:
    name: Ansible Provisioning
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Ansible
        run: |
          sudo apt update
          sudo apt install ansible -y

      - name: Provision Nginx Server
        run: ansible-playbook -i "${{ needs.terraform.outputs.public_ip }}" install_nginx.yml

      - name: Provision MySQL Servers
        run: ansible-playbook -i "${{ needs.terraform.outputs.private_ips }}" install_mysql.yml
